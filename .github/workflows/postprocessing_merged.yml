name: Post-processing

# don't limit to main branch
# consider maintenance branch
on:
  push:
    branches:
      - 'release-branch.**'
      - main
    paths-ignore:
      - '.github/**'
      - LICENSE
      - README.md
      - '.gitignore'

concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  release-binary-files:
    strategy:
      matrix:
        os:
          - macos-13
        #   - macos-latest
        #   - ubuntu-24.04
        #   - ubuntu-24.04-arm
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check out LLGo (for Python packages)
        uses: actions/checkout@v4
        with:
          repository: '1351914167/llgo'
          path: .llgo
          ref: get_pip
      - name: Check out LLPyg (for Python packages)
        uses: actions/checkout@v4
        with:
          repository: 'toaction/llpyg'
          path: .llpyg
          ref: feat/v1
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.x
      - name: Set up Tool
        run: |
          git clone https://github.com/PengPengPeng717/llpkgstore.git
          cd llpkgstore
          # git checkout version
          git checkout v2
          go build -o llpkgstore ./cmd/llpkgstore
          sudo mv llpkgstore /usr/local/bin/
      - name: Install dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          # 先卸载可能冲突的cmake
          brew uninstall cmake --ignore-dependencies || true
          # 安装依赖包
          brew install llvm@19 bdw-gc openssl libffi libuv cmake conan lld@19
          brew link --force libffi
          echo "$(brew --prefix llvm@19)/bin" >> $GITHUB_PATH
          echo "$(brew --prefix lld@19)/bin" >> $GITHUB_PATH
          echo "Dependencies installed for both Python and C++ packages"
    #   - name: Install dependencies (Ubuntu)
    #     if: startsWith(matrix.os, 'ubuntu')
    #     run: |
    #       sudo apt-get update
    #       sudo apt-get install -y cmake python3 python3-pip pkg-config
    #       python3 -m pip install conan
    #       echo "Dependencies installed for both Python and C++ packages"
      - name: Setup LLGo (for Python packages)
        working-directory: .llgo
        run: |
          go install -v ./cmd/...
          export LLGO_ROOT=$PWD
          echo "LLGO_ROOT=$LLGO_ROOT" >> $GITHUB_ENV
          echo "LLGO_RPATH_CHANGE=ON" >> $GITHUB_ENV
      - name: Set up Python environment (for Python packages)
        run: |
          echo "GOTOOLCHAIN=go1.24.5" >> $GITHUB_ENV
          # 保存原始Python环境变量
          echo "ORIGINAL_PYTHONHOME=$PYTHONHOME" >> $GITHUB_ENV
          echo "ORIGINAL_PATH=$PATH" >> $GITHUB_ENV
          # 设置LLGo Python环境
          export PYTHONHOME=$LLGO_ROOT/python
          export PATH=$PYTHONHOME/bin:$PATH
          export DYLD_LIBRARY_PATH=$PYTHONHOME/lib
          export PKG_CONFIG_PATH=$PYTHONHOME/lib/pkgconfig
          echo "PYTHONHOME=$PYTHONHOME" >> $GITHUB_ENV
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
      - name: Setup LLPyg (for Python packages)
        working-directory: .llpyg
        run: |
          cd _xtool
          llgo install ./...
          cd ..
          go install -v ./cmd/...
      - name: Set up Conan (for C++ packages)
        run: |
          # 临时恢复系统Python环境用于Conan
          if [ -n "$ORIGINAL_PYTHONHOME" ]; then
            export PYTHONHOME="$ORIGINAL_PYTHONHOME"
          else
            unset PYTHONHOME
          fi
          # 恢复原始PATH，但保留必要的工具路径
          export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH"
          echo "Using system Python for Conan: $(which python3 || which python)"
          conan profile detect
      - name: Run release process
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: llpkgstore release
      - name: Upload binary file to artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.BIN_FILENAME || 'llpkg-binary'}}
          path: ${{env.BIN_PATH || './dist'}}
          retention-days: 1
  post-processing:
    runs-on: ubuntu-latest
    needs: [release-binary-files]
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref_name }}
          path: .main
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.x
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      - name: Configure GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status
      - name: Set up Tool
        run: |
          git clone https://github.com/PengPengPeng717/llpkgstore.git
          cd llpkgstore
          # git checkout version
          git checkout v2
          go build -o llpkgstore ./cmd/llpkgstore
          sudo mv llpkgstore /usr/local/bin/
      - name: Checkout to website (for C++ packages)
        uses: actions/checkout@v4
        with:
          ref: website
          path: .website
      - name: Copy llpkgstore.json to root (for C++ packages)
        continue-on-error: true
        run: |
          ls .website .website/public
          cp .website/public/llpkgstore.json .main
          rm -rf .website
      - name: Detect package types and process accordingly
        working-directory: .main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Current branch: $(git branch --show-current)"
          echo "Current commit: $(git log -1 --pretty=format:%s)"
          
          # 从 commit 消息中提取源分支名并切换
          COMMIT_MSG=$(git log -1 --pretty=format:%s)
          if [[ $COMMIT_MSG =~ Merge\ pull\ request.*from\ PengPengPeng717/([^[:space:]]+) ]]; then
            SOURCE_BRANCH="${BASH_REMATCH[1]}"
            echo "Detected source branch from commit message: $SOURCE_BRANCH"
            git fetch origin $SOURCE_BRANCH:$SOURCE_BRANCH
            git checkout $SOURCE_BRANCH
            echo "Switched to branch: $(git branch --show-current)"
          fi
          
          # 获取修改的包目录
          echo "=== Finding modified packages ==="
          if git log -1 --pretty=format:%P | grep -q " "; then
            # 合并提交：比较与main分支的差异
            BASE_COMMIT=$(git merge-base HEAD main)
            MODIFIED_PACKAGES=$(git diff --name-only $BASE_COMMIT HEAD | grep -E '^[^/]+/' | cut -d'/' -f1 | sort -u)
          else
            # 普通提交：比较与前一个提交的差异
            MODIFIED_PACKAGES=$(git diff --name-only HEAD~1 HEAD | grep -E '^[^/]+/' | cut -d'/' -f1 | sort -u)
          fi
          
          # 如果没有修改的包，检查是否是release提交
          if [ -z "$MODIFIED_PACKAGES" ]; then
            if [[ $COMMIT_MSG =~ Release-as:\ ([^/]+)/ ]]; then
              PACKAGE_NAME="${BASH_REMATCH[1]}"
              echo "Found release commit for package: $PACKAGE_NAME"
              # 验证包目录是否存在
              if [ -d "$PACKAGE_NAME" ] && [ -f "$PACKAGE_NAME/llpkg.cfg" ]; then
                MODIFIED_PACKAGES="$PACKAGE_NAME"
              elif [ -d "py/$PACKAGE_NAME" ] && [ -f "py/$PACKAGE_NAME/llpkg.cfg" ]; then
                MODIFIED_PACKAGES="$PACKAGE_NAME"
              else
                echo "Package directory $PACKAGE_NAME not found, skipping postprocessing"
                exit 0
              fi
            else
              echo "No release commit detected, skipping postprocessing"
              exit 0
            fi
          fi
          
          # 过滤非包目录并检查py目录
          FILTERED_PACKAGES=""
          for package in $MODIFIED_PACKAGES; do
            if [[ "$package" =~ ^(py|\.github|\.git|public|\.DS_Store)$ ]]; then
              continue
            fi
            if [ -d "$package" ] && [ -f "$package/llpkg.cfg" ]; then
              FILTERED_PACKAGES="$FILTERED_PACKAGES $package"
            fi
          done
          
          # 如果py目录被修改，检查py目录下的包
          if [ -z "$FILTERED_PACKAGES" ] && echo "$MODIFIED_PACKAGES" | grep -q "py"; then
            if [ -d "py" ]; then
              for subdir in py/*/; do
                if [ -d "$subdir" ] && [ -f "$subdir/llpkg.cfg" ]; then
                  package_name=$(basename "$subdir")
                  FILTERED_PACKAGES="$FILTERED_PACKAGES $package_name"
                fi
              done
            fi
          fi
          
          MODIFIED_PACKAGES="$FILTERED_PACKAGES"
          echo "Packages to process: $MODIFIED_PACKAGES"
          
          # 分类包类型
          PYTHON_PACKAGES=""
          CPP_PACKAGES=""
          
          for package in $MODIFIED_PACKAGES; do
            # 检查包目录位置
            if [ -d "$package" ] && [ -f "$package/llpkg.cfg" ]; then
              PACKAGE_DIR="$package"
            elif [ -d "py/$package" ] && [ -f "py/$package/llpkg.cfg" ]; then
              PACKAGE_DIR="py/$package"
            else
              continue
            fi
            
            # 检查包类型
            PACKAGE_TYPE=$(grep -o '"type":\s*"[^"]*"' "$PACKAGE_DIR/llpkg.cfg" | cut -d'"' -f4 || echo "")
            if [ "$PACKAGE_TYPE" = "python" ]; then
              PYTHON_PACKAGES="$PYTHON_PACKAGES $package"
            else
              CPP_PACKAGES="$CPP_PACKAGES $package"
            fi
          done
          
          echo "Python packages: $PYTHON_PACKAGES"
          echo "C++ packages: $CPP_PACKAGES"
          
          # 获取目标包（从commit消息）
          TARGET_PACKAGE=""
          if echo "$COMMIT_MSG" | grep -q "Release-as:"; then
            TARGET_PACKAGE=$(echo "$COMMIT_MSG" | sed 's/Release-as: \([^/]*\)\/.*/\1/')
            echo "Target package from commit: $TARGET_PACKAGE"
          fi
          
          # 处理Python包
          if [ -n "$PYTHON_PACKAGES" ]; then
            echo "=== Processing Python packages ==="
            
            # 为所有Python包创建符号链接
            for package in $PYTHON_PACKAGES; do
              if [ -d "$package" ]; then
                rm -rf "$package"
              fi
              ln -s "py/$package" "$package"
              echo "Created symlink: $package -> py/$package"
            done
            
            # 处理每个包
            for package in $PYTHON_PACKAGES; do
              if [ -n "$TARGET_PACKAGE" ] && [ "$package" != "$TARGET_PACKAGE" ]; then
                echo "Skipping $package (target: $TARGET_PACKAGE)"
                continue
              fi
              
              echo "Processing Python package: $package"
              
              # 执行postprocessing
              llpkgstore postprocessing
              
              # 设置Python包目录结构
              mkdir -p py/$package
              if [ -d "py/$package" ]; then
                cp -r "py/$package"/* py/$package/ 2>/dev/null || echo "No files to copy for $package"
              fi
            done
          fi
          
          # 处理C++包
          if [ -n "$CPP_PACKAGES" ]; then
            echo "=== Processing C++ packages ==="
            for package in $CPP_PACKAGES; do
              if [ -n "$TARGET_PACKAGE" ] && [ "$package" != "$TARGET_PACKAGE" ]; then
                echo "Skipping $package (target: $TARGET_PACKAGE)"
                continue
              fi
              
              echo "Processing C++ package: $package"
              llpkgstore postprocessing
            done
          fi
      - name: Checkout website branch (for C++ packages)
        uses: actions/checkout@v4
        with:
            ref: website
            path: .website
      - name: Move llpkgstore.json to website (for C++ packages)
        run: |
          if [ -f ".main/llpkgstore.json" ]; then
            mv .main/llpkgstore.json .website/public
            echo "Moved llpkgstore.json to website for C++ packages"
          else
            echo "No llpkgstore.json found for C++ packages"
          fi
    #   - name: Commit and push changes (for C++ packages)
    #     working-directory: .website
    #     run: |
    #         git config --local user.email "action@github.com"
    #         git config --local user.name "GitHub Action"
    #         git add public/llpkgstore.json
    #         git commit -m "Update llpkgstore.json" || echo "No changes to commit"
    #         git push
      - name: Handle Python packages upload
        working-directory: .main
        run: |
          if [ -d "py" ]; then
            echo "=== Processing Python packages for upload ==="
            echo "py directory contents:"
            ls -la py/
            
            # Python包不再维护llpkgstore.json，直接处理包文件
            echo "Processing Python packages for upload (no llpkgstore.json required)"
            
            # 这里可以添加Python包的上传逻辑
            # 例如：上传到专门的Python包存储位置
            echo "Python packages processed and ready for upload"
            echo "Python package structure:"
            find py/ -type f -name "*.go" -o -name "*.cfg" | head -10
          else
            echo "No py directory found"
          fi
#   build-and-upload:
#     runs-on: ubuntu-latest
#     needs: [post-processing]
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           ref: website
#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: 23.8.0
#       - run: corepack enable
#       - name: Install Dependencies
#         uses: borales/actions-yarn@v4
#         with:
#           cmd: install
#       - name: Build
#         uses: borales/actions-yarn@v4
#         with:
#           cmd: build
#       - name: Upload artifact
#         uses: actions/upload-pages-artifact@v3
#         with:
#           path: 'dist'
#   deploy:
#     needs: build-and-upload
#     runs-on: ubuntu-latest
#     permissions:
#       pages: write
#       id-token: write
#     steps:
#       - name: Deploy to GitHub Pages
#         id: deployment
#         uses: actions/deploy-pages@v4
